rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a field changed
    function fieldChanged(field) {
      return field in request.resource.data && 
             request.resource.data[field] != resource.data.get(field, null);
    }
    
    // Products - public read for visible products, merchant write for own products
    match /products/{productId} {
      // Allow public read for visible products (required for public storefront)
      allow read: if resource.data.isVisible == true;
      // Allow merchants to manage their own products
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Users collection - for store info and profiles
    match /users/{userId} {
      allow read: if true; // For testing, allow all reads
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Settings - private to merchant, graceful failure for public access
    match /settings/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId &&
        // Prevent direct manipulation of payment provider configs
        !fieldChanged('mpesaSecretKey') &&
        !fieldChanged('mpesaShortCode') &&
        !fieldChanged('mpesaPasskey') &&
        !fieldChanged('mpesaConsumerKey') &&
        !fieldChanged('mpesaConsumerSecret') &&
        !fieldChanged('mpesaWebhookSecret');
    }
    
    // User settings (legacy) - public read for storefront display
    match /userSettings/{userId} {
      allow read: if true; // Allow public read for storefront
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User profiles - public read for store info
    match /userProfiles/{userId} {
      allow read: if true; // Public read for store information
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Orders - enhanced with payment protection
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.businessOwnerId == request.auth.uid || 
         resource.data.customerId == request.auth.uid ||
         resource.data.merchantId == request.auth.uid);
      
      // Allow public order creation for guest checkout
      allow create: if 
        // Only allow setting initial payment status to 'unpaid'
        (!('paymentStatus' in request.resource.data) || request.resource.data.paymentStatus == 'unpaid') &&
        // Prevent setting sensitive payment fields on creation
        !('paymentRef' in request.resource.data) &&
        !('mpesaReceiptNumber' in request.resource.data) &&
        !('mpesaTransactionDate' in request.resource.data) &&
        !('settlementStatus' in request.resource.data) &&
        !('lastPaymentCheckAt' in request.resource.data);
      
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.merchantId ||
         request.auth.uid == resource.data.businessOwnerId ||
         request.auth.uid == resource.data.customerId) &&
        // Prevent client updates to payment-sensitive fields
        !fieldChanged('paymentStatus') &&
        !fieldChanged('paymentRef') &&
        !fieldChanged('paymentProvider') &&
        !fieldChanged('paymentAmount') &&
        !fieldChanged('paymentCurrency') &&
        !fieldChanged('settlementStatus') &&
        !fieldChanged('lastPaymentCheckAt') &&
        !fieldChanged('mpesaReceiptNumber') &&
        !fieldChanged('mpesaTransactionDate') &&
        !fieldChanged('mpesaPhoneNumber') &&
        !fieldChanged('mpesaCheckoutRequestID') &&
        !fieldChanged('subscriptionId') &&
        !fieldChanged('subscriptionStatus');
    }
    
    // Payment transactions - secure access only
    match /payments/{paymentId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.merchantId);
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.merchantId;
    }
    
    // M-Pesa payment events collection - only Cloud Functions can write
    match /payment_events/{eventId} {
      allow read: if false; // No client reads
      allow write: if false; // Only Cloud Functions can write
    }
    
    // M-Pesa transactions - secured access
    match /mpesa_transactions/{transactionId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.merchantId);
      allow create, update, delete: if false; // Only Cloud Functions can write
    }
    
    // Business information - public read, owner write
    match /businesses/{businessId} {
      allow read: if true; // Public read for storefront display
      allow write: if request.auth != null && request.auth.uid == businessId;
    }
    
    // Stock transactions - merchants can manage their own
    match /stockTransactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Analytics data - merchants can read/write their own
    match /analytics/{analyticsId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Store configurations - public read for display, merchant write
    match /storeConfigs/{configId} {
      allow read: if true; // Public read for storefront themes/branding
      allow write: if request.auth != null && request.auth.uid == configId;
    }
    
    // Fallback for other collections - authenticated users only
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
